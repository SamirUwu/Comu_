<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="description" content="">
    <meta name="author" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Potree Viewer with Dynamic Marker</title>

    <link rel="stylesheet" type="text/css" href="./libs/potree/potree.css">
    <link rel="stylesheet" type="text/css" href="./libs/jquery-ui/jquery-ui.min.css">
    <link rel="stylesheet" type="text/css" href="./libs/openlayers3/ol.css">
    <link rel="stylesheet" type="text/css" href="./libs/spectrum/spectrum.css">
    <link rel="stylesheet" type="text/css" href="./libs/jstree/themes/mixed/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">

    <style>
        #info-display {
            position: absolute;
            top: 20px;
            right: 20px;
            background-color: rgba(0, 255, 136, 0.656);
            color: #333;
            padding: 15px 20px;
            border-radius: 12px;
            font-family: 'Roboto', Arial, sans-serif;
            font-size: 15px;
            z-index: 10000;
            line-height: 1.6;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            min-width: 240px;
            opacity: 1;
            transition: opacity 1s ease-in-out;
        }

        #info-display.fade {
            opacity: 0;
        }

        #info-display div {
        display: flex;
        align-items: center;
        margin-bottom: 10px; /* un poco más */
        gap: 4px; /* espacio horizontal entre ícono y texto */
        }

        #info-display i {
        margin-right: 10px;
        width: 24px; /* antes 20px */
        min-width: 24px;
        text-align: center;
        color: #555;
        }

        #info-display .weather-section {
            border-top: 1px solid #ccc;
            margin-top: 12px;
            padding-top: 12px;
        }

        .weather-main {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .weather-main img {
            width: 60px;
            height: 60px;
            margin-right: 12px;
        }

        .potree_container {
            position: relative;
            z-index: 0;
        }
    </style>
</head>
<body>
    <script src="./libs/jquery/jquery-3.1.1.min.js"></script>
    <script src="./libs/spectrum/spectrum.js"></script>
    <script src="./libs/jquery-ui/jquery-ui.min.js"></script>
    <script src="./libs/other/BinaryHeap.js"></script>
    <script src="./libs/tween/tween.min.js"></script>
    <script src="./libs/d3/d3.js"></script>
    <script src="./libs/proj4/proj4.js"></script>
    <script src="./libs/openlayers3/ol.js"></script>
    <script src="./libs/i18next/i18next.js"></script>
    <script src="./libs/jstree/jstree.js"></script>
    <script src="./libs/potree/potree.js"></script>
    <script src="./libs/plasio/js/laslaz.js"></script>

    <div class="potree_container" style="position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;">
        <div id="potree_render_area" style="background-image: url('./libs/potree/resources/images/background.jpg');"></div>
        <div id="potree_sidebar_container"></div>
    <div id="info-display">
        <div class="general-info">
            <div><i class="fas fa-tachometer-alt"></i> Velocity: 0 m/s</div>
            <div><i class="fas fa-ruler"></i> Distance: 0 m</div>
            <div><i class="fas fa-shoe-prints"></i> Steps: 0</div>
        </div>
        <div class="weather-info" style="margin-top: 12px; border-top: 1px solid #ccc; padding-top: 10px;">
            <div><i class="fas fa-thermometer-half"></i> Temperature: N/A °C</div>
            <div><i class="fas fa-wind"></i> Wind Speed: N/A m/s</div>
            <div><i class="fas fa-tint"></i> Humidity: N/A %</div>
        </div>
    </div>



    <script>
        window.viewer = new Potree.Viewer(document.getElementById("potree_render_area"));
        viewer.setEDLEnabled(true);
        viewer.setFOV(60);
        viewer.setPointBudget(2_000_000);
        viewer.loadSettingsFromURL();
        //viewer.setDescription("Dynamic Marker Viewer");

        viewer.loadGUI(() => {
            viewer.setLanguage('en');
            $("#menu_appearance").next().show();
            $("#menu_tools").next().show();
            $("#menu_clipping").next().show();
            viewer.toggleSidebar();
        });

        Potree.loadPointCloud("./pointclouds/nube_malecon/metadata.json", "nube_malecon", e => {
            let scene = viewer.scene;
            let pointcloud = e.pointcloud;
            let material = pointcloud.material;

            material.activeAttributeName = "composite";
            material.weightRGB = 0;
            material.weightElevation = 1;
            material.weightIntensity = 1;
            material.size = 1;
            material.pointSizeType = Potree.PointSizeType.ADAPTIVE;
            material.shape = Potree.PointShape.PARABOLOID;

            if (pointcloud.projection == "") {
                pointcloud.projection = "+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs +type=crs";
            }

            scene.addPointCloud(pointcloud);
            viewer.fitToScreen();

            const measuringTool = new Potree.MeasuringTool(viewer);
            const measure = measuringTool.startInsertion({
                showDistances: false,
                showAngles: false,
                showCoordinates: true,
                showArea: false,
                showCircle: false,
                showHeight: false,
                showAzimuth: false,
                showEdges: false,
                maxMarkers: 1,
                name: "Dynamic Marker"
            });

            measure.spheres[0].material.color.setHex(0xff0000);
            measure.spheres[0].scale.set(5, 5, 5);

            function pollData() {
                fetch('http://localhost:80/api/latestPoint')
                    .then(response => {
                        console.log('Fetch response status:', response.status);
                        if (!response.ok) throw new Error('Network response was not ok');
                        return response.json();
                    })
                    .then(data => {
                        console.log('Received data:', data);
                        if (data && data.x !== undefined && data.y !== undefined && data.z !== undefined) {
                            // Assuming you removed the scale factor as it was causing issues
                            measure.points[0].position.set(data.x, data.y, data.z);
                            measure.spheres[0].position.set(data.x, data.y, data.z);
                            console.log('Marker position set to:', measure.spheres[0].position);
                            measure.update();
                            viewer.renderer.render(viewer.scene.scene, viewer.scene.getActiveCamera());
                            // Remove viewer.fitToScreen() from here to prevent auto-zoom

                            const velocity = data.velocity || 0;
                            const distance = data.distance || 0;
                            const steps = data.steps || 0;
                            const temperature = data.weather?.temperature || 'N/A';
                            const windSpeed = data.weather?.windSpeed || 'N/A';
                            const humidity = data.weather?.humidity || 'N/A';
                            const weatherIcon = data.weather?.icon ? `http://openweathermap.org/img/wn/${data.weather.icon}@2x.png` : '';
                            const weatherText = data.weather?.icon ? getWeatherDescription(data.weather.icon) : 'N/A';

                            console.log('Display data:', { velocity, distance, steps, temperature, windSpeed, humidity, weatherIcon, weatherText });

                            const velocityText = `<i class="fas fa-tachometer-alt"></i> Velocity: ${velocity.toFixed(2)} m/s`;
                            const distanceText = `<i class="fas fa-ruler"></i> Distance: ${distance.toFixed(2)} m`;
                            const stepsText = `<i class="fas fa-shoe-prints"></i> Steps: ${Math.round(steps)}`;
                            const weatherDisplayText = weatherIcon 
                                ? `<img src="${weatherIcon}" alt="Weather icon" style="width: 30px; height: 30px; vertical-align: middle; margin-right: 8px;"> Weather: ${weatherText}`
                                : `<i class="fas fa-cloud-sun"></i> Weather: ${weatherText}`;
                            const temperatureText = `<i class="fas fa-thermometer-half"></i> Temperature: ${temperature} °C`;
                            const windSpeedText = `<i class="fas fa-wind"></i> Wind Speed: ${windSpeed} m/s`;
                            const humidityText = `<i class="fas fa-tint"></i> Humidity: ${humidity} %`;

                            const infoDisplay = document.getElementById('info-display');
                            infoDisplay.classList.add('fade');
                            setTimeout(() => {
                                infoDisplay.innerHTML = `
                                    <div>${velocityText}</div>
                                    <div>${distanceText}</div>
                                    <div>${stepsText}</div>
                                    <div class="weather-section">
                                        <div>${weatherDisplayText}</div>
                                        <div>${temperatureText}</div>
                                        <div>${windSpeedText}</div>
                                        <div>${humidityText}</div>
                                    </div>
                                `;
                                infoDisplay.classList.remove('fade');
                            }, 500);
                        } else {
                            console.error('Invalid data format:', data);
                        }
                    })
                    .catch(error => console.error('Error fetching data:', error));
            }

            // Función para obtener la descripción del clima
            function getWeatherDescription(iconCode) {
                const weatherDescriptions = {
                    '01d': 'Clear sky (day)',
                    '01n': 'Clear sky (night)',
                    '02d': 'Few clouds (day)',
                    '02n': 'Few clouds (night)',
                    '03d': 'Scattered clouds',
                    '03n': 'Scattered clouds',
                    '04d': 'Broken clouds',
                    '04n': 'Broken clouds',
                    '09d': 'Shower rain',
                    '09n': 'Shower rain',
                    '10d': 'Rain (day)',
                    '10n': 'Rain (night)',
                    '11d': 'Thunderstorm',
                    '11n': 'Thunderstorm',
                    '13d': 'Snow',
                    '13n': 'Snow',
                    '50d': 'Mist',
                    '50n': 'Mist'
                };
                return weatherDescriptions[iconCode] || 'Unknown';
            }

            setInterval(pollData, 8000);
            pollData();
        });
    </script>
</body>
</html>