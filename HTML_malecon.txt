<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="description" content="">
    <meta name="author" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Potree Viewer with Dynamic Marker</title>

    <link rel="stylesheet" type="text/css" href="./libs/potree/potree.css">
    <link rel="stylesheet" type="text/css" href="./libs/jquery-ui/jquery-ui.min.css">
    <link rel="stylesheet" type="text/css" href="./libs/openlayers3/ol.css">
    <link rel="stylesheet" type="text/css" href="./libs/spectrum/spectrum.css">
    <link rel="stylesheet" type="text/css" href="./libs/jstree/themes/mixed/style.css">

    <style>
        #info-display {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 10px 15px;
            border-radius: 5px;
            font-family: Arial, sans-serif;
            font-size: 14px;
            z-index: 10000;
            line-height: 1.5;
        }

        .potree_container {
            position: relative;
            z-index: 0;
        }
    </style>
</head>
<body>
    <script src="./libs/jquery/jquery-3.1.1.min.js"></script>
    <script src="./libs/spectrum/spectrum.js"></script>
    <script src="./libs/jquery-ui/jquery-ui.min.js"></script>
    <script src="./libs/other/BinaryHeap.js"></script>
    <script src="./libs/tween/tween.min.js"></script>
    <script src="./libs/d3/d3.js"></script>
    <script src="./libs/proj4/proj4.js"></script>
    <script src="./libs/openlayers3/ol.js"></script>
    <script src="./libs/i18next/i18next.js"></script>
    <script src="./libs/jstree/jstree.js"></script>
    <script src="./libs/potree/potree.js"></script>
    <script src="./libs/plasio/js/laslaz.js"></script>

    <div class="potree_container" style="position: absolute; width: 100%; height: 100%; left: 0px; top: 0px;">
        <div id="potree_render_area" style="background-image: url('./libs/potree/resources/images/background.jpg');"></div>
        <div id="potree_sidebar_container"></div>
        <div id="info-display">
            <div>Velocity: 0 m/s</div>
            <div>Distance: 0 m</div>
            <div>Steps: 0</div>
            <div>Temperature: N/A °C</div>
            <div>Wind Speed: N/A m/s</div>
            <div>Humidity: N/A %</div>
        </div>
    </div>

    <script>
        window.viewer = new Potree.Viewer(document.getElementById("potree_render_area"));
        viewer.setEDLEnabled(true);
        viewer.setFOV(60);
        viewer.setPointBudget(2_000_000);
        viewer.loadSettingsFromURL();
        viewer.setDescription("Dynamic Marker Viewer");

        viewer.loadGUI(() => {
            viewer.setLanguage('en');
            $("#menu_appearance").next().show();
            $("#menu_tools").next().show();
            $("#menu_clipping").next().show();
            viewer.toggleSidebar();
        });

        Potree.loadPointCloud("./pointclouds/nube_malecon/metadata.json", "nube_malecon", e => {
            let scene = viewer.scene;
            let pointcloud = e.pointcloud;
            let material = pointcloud.material;

            material.activeAttributeName = "composite";
            material.weightRGB = 0;
            material.weightElevation = 1;
            material.weightIntensity = 1;
            material.size = 1;
            material.pointSizeType = Potree.PointSizeType.ADAPTIVE;
            material.shape = Potree.PointShape.PARABOLOID;

            if (pointcloud.projection == "") {
                pointcloud.projection = "+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs +type=crs";
            }

            scene.addPointCloud(pointcloud);
            viewer.fitToScreen();

            const measuringTool = new Potree.MeasuringTool(viewer);
            const measure = measuringTool.startInsertion({
                showDistances: false,
                showAngles: false,
                showCoordinates: true,
                showArea: false,
                showCircle: false,
                showHeight: false,
                showAzimuth: false,
                showEdges: false,
                maxMarkers: 1,
                name: "Dynamic Marker"
            });

            measure.spheres[0].material.color.setHex(0xff0000);
            measure.spheres[0].scale.set(5, 5, 5);

            function updateMarkerPosition(x, y, z) {
                if (measure.points.length > 0) {
                    const scale = 1000;
                    measure.points[0].position.set(x * scale, y * scale, z * scale);
                    measure.spheres[0].position.set(x * scale, y * scale, z * scale);
                    measure.update();
                    viewer.renderer.render(viewer.scene.scene, viewer.scene.getActiveCamera());
                    console.log(`Marker updated to: X=${x * scale}, Y=${y * scale}, Z=${z * scale}`);
                } else {
                    console.warn("No marker points available to update");
                }
            }

            function pollData() {
                fetch('/api/latestPoint')
                    .then(response => {
                        console.log('Fetch response status:', response.status);
                        if (!response.ok) {
                            return response.json().then(err => {
                                throw new Error(`HTTP error! status: ${response.status}, message: ${err.error || 'Unknown'}`);
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Received data:', data);
                        if (data && data.x !== undefined && data.y !== undefined && data.z !== undefined) {
                            console.log(`Received coordinates: X=${data.x}, Y=${data.y}, Z=${data.z}`);
                            console.log(`Received velocity: ${data.velocity}`); 
                            console.log(`Received distance: ${data.distance}`);
                            console.log(`Received steps: ${data.steps}`);
                            console.log(`Received weather: Temperature=${data.weather.temperature}°C, Wind Speed=${data.weather.windSpeed}m/s, Humidity=${data.weather.humidity}%`);
                            updateMarkerPosition(data.x, data.y, data.z);
                            const velocity = data.velocity !== undefined ? data.velocity : 0;
                            const distance = data.distance !== undefined ? data.distance : 0;
                            const steps = data.steps !== undefined ? data.steps : 0;
                            const temperature = data.weather.temperature !== 'N/A' ? data.weather.temperature : 'N/A';
                            const windSpeed = data.weather.windSpeed !== 'N/A' ? data.weather.windSpeed : 'N/A';
                            const humidity = data.weather.humidity !== 'N/A' ? data.weather.humidity : 'N/A';
                            const velocityText = `Velocity: ${velocity.toFixed(2)} m/s`;
                            const distanceText = `Distance: ${distance.toFixed(2)} m`;
                            const stepsText = `Steps: ${Math.round(steps)}`;
                            const temperatureText = `Temperature: ${temperature} °C`;
                            const windSpeedText = `Wind Speed: ${windSpeed} m/s`;
                            const humidityText = `Humidity: ${humidity} %`;
                            console.log(`Updating display - ${velocityText}, ${distanceText}, ${stepsText}, ${temperatureText}, ${windSpeedText}, ${humidityText}`);
                            document.getElementById('info-display').innerHTML = `
                                <div>${velocityText}</div>
                                <div>${distanceText}</div>
                                <div>${stepsText}</div>
                                <div>${temperatureText}</div>
                                <div>${windSpeedText}</div>
                                <div>${humidityText}</div>
                            `;
                        } else {
                            console.warn('Invalid data received:', data);
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching data:', error);
                    });
            }

            setInterval(pollData, 1000);
            pollData();
        });
    </script>
</body>
</html>
